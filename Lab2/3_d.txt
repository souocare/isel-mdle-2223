=== Run information ===

Scheme:       weka.classifiers.trees.J48 -C 0.25 -M 2
Relation:     pima_diabetes
Instances:    768
Attributes:   9
              preg
              plas
              pres
              skin
              insu
              mass
              pedi
              age
              class
Test mode:    10-fold cross-validation

=== Classifier model (full training set) ===

J48 pruned tree
------------------

plas <= 127
|   mass <= 26.4: tested_negative (132.0/3.0)
|   mass > 26.4
|   |   age <= 28: tested_negative (180.0/22.0)
|   |   age > 28
|   |   |   plas <= 99: tested_negative (55.0/10.0)
|   |   |   plas > 99
|   |   |   |   pedi <= 0.56: tested_negative (84.0/34.0)
|   |   |   |   pedi > 0.56
|   |   |   |   |   preg <= 6
|   |   |   |   |   |   age <= 30: tested_positive (4.0)
|   |   |   |   |   |   age > 30
|   |   |   |   |   |   |   age <= 34: tested_negative (7.0/1.0)
|   |   |   |   |   |   |   age > 34
|   |   |   |   |   |   |   |   mass <= 33.1: tested_positive (6.0)
|   |   |   |   |   |   |   |   mass > 33.1: tested_negative (4.0/1.0)
|   |   |   |   |   preg > 6: tested_positive (13.0)
plas > 127
|   mass <= 29.9
|   |   plas <= 145: tested_negative (41.0/6.0)
|   |   plas > 145
|   |   |   age <= 25: tested_negative (4.0)
|   |   |   age > 25
|   |   |   |   age <= 61
|   |   |   |   |   mass <= 27.1: tested_positive (12.0/1.0)
|   |   |   |   |   mass > 27.1
|   |   |   |   |   |   pres <= 82
|   |   |   |   |   |   |   pedi <= 0.396: tested_positive (8.0/1.0)
|   |   |   |   |   |   |   pedi > 0.396: tested_negative (3.0)
|   |   |   |   |   |   pres > 82: tested_negative (4.0)
|   |   |   |   age > 61: tested_negative (4.0)
|   mass > 29.9
|   |   plas <= 157
|   |   |   pres <= 61: tested_positive (15.0/1.0)
|   |   |   pres > 61
|   |   |   |   age <= 30: tested_negative (40.0/13.0)
|   |   |   |   age > 30: tested_positive (60.0/17.0)
|   |   plas > 157: tested_positive (92.0/12.0)

Number of Leaves  : 	20

Size of the tree : 	39


Time taken to build model: 0.02 seconds

=== Stratified cross-validation ===
=== Summary ===

Correctly Classified Instances         567               73.8281 %
Incorrectly Classified Instances       201               26.1719 %
Kappa statistic                          0.4164
Mean absolute error                      0.3158
Root mean squared error                  0.4463
Relative absolute error                 69.4841 %
Root relative squared error             93.6293 %
Total Number of Instances              768     

=== Detailed Accuracy By Class ===

                 TP Rate  FP Rate  Precision  Recall   F-Measure  MCC      ROC Area  PRC Area  Class
                 0,814    0,403    0,790      0,814    0,802      0,417    0,751     0,811     tested_negative
                 0,597    0,186    0,632      0,597    0,614      0,417    0,751     0,572     tested_positive
Weighted Avg.    0,738    0,327    0,735      0,738    0,736      0,417    0,751     0,727     

=== Confusion Matrix ===

   a   b   <-- classified as
 407  93 |   a = tested_negative
 108 160 |   b = tested_positive

=== Source code ===

// Generated with Weka 3.8.6
//
// This code is public domain and comes with no warranty.
//
// Timestamp: Wed Mar 29 21:47:03 WEST 2023

package weka.classifiers;

import weka.core.Attribute;
import weka.core.Capabilities;
import weka.core.Capabilities.Capability;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.RevisionUtils;
import weka.classifiers.Classifier;
import weka.classifiers.AbstractClassifier;

public class WekaWrapper
  extends AbstractClassifier {

  /**
   * Returns only the toString() method.
   *
   * @return a string describing the classifier
   */
  public String globalInfo() {
    return toString();
  }

  /**
   * Returns the capabilities of this classifier.
   *
   * @return the capabilities
   */
  public Capabilities getCapabilities() {
    weka.core.Capabilities result = new weka.core.Capabilities(this);

    result.enable(weka.core.Capabilities.Capability.NOMINAL_ATTRIBUTES);
    result.enable(weka.core.Capabilities.Capability.NUMERIC_ATTRIBUTES);
    result.enable(weka.core.Capabilities.Capability.DATE_ATTRIBUTES);
    result.enable(weka.core.Capabilities.Capability.MISSING_VALUES);
    result.enable(weka.core.Capabilities.Capability.NOMINAL_CLASS);
    result.enable(weka.core.Capabilities.Capability.MISSING_CLASS_VALUES);


    result.setMinimumNumberInstances(0);

    return result;
  }

  /**
   * only checks the data against its capabilities.
   *
   * @param i the training data
   */
  public void buildClassifier(Instances i) throws Exception {
    // can classifier handle the data?
    getCapabilities().testWithFail(i);
  }

  /**
   * Classifies the given instance.
   *
   * @param i the instance to classify
   * @return the classification result
   */
  public double classifyInstance(Instance i) throws Exception {
    Object[] s = new Object[i.numAttributes()];
    
    for (int j = 0; j < s.length; j++) {
      if (!i.isMissing(j)) {
        if (i.attribute(j).isNominal())
          s[j] = new String(i.stringValue(j));
        else if (i.attribute(j).isNumeric())
          s[j] = new Double(i.value(j));
      }
    }
    
    // set class value to missing
    s[i.classIndex()] = null;
    
    return WekaClassifier.classify(s);
  }

  /**
   * Returns the revision string.
   * 
   * @return        the revision
   */
  public String getRevision() {
    return RevisionUtils.extract("1.0");
  }

  /**
   * Returns only the classnames and what classifier it is based on.
   *
   * @return a short description
   */
  public String toString() {
    return "Auto-generated classifier wrapper, based on weka.classifiers.trees.J48 (generated with Weka 3.8.6).\n" + this.getClass().getName() + "/WekaClassifier";
  }

  /**
   * Runs the classfier from commandline.
   *
   * @param args the commandline arguments
   */
  public static void main(String args[]) {
    runClassifier(new WekaWrapper(), args);
  }
}

class WekaClassifier {

  public static double classify(Object[] i)
    throws Exception {

    double p = Double.NaN;
    p = WekaClassifier.N9bb11880(i);
    return p;
  }
  static double N9bb11880(Object []i) {
    double p = Double.NaN;
    if (i[1] == null) {
      p = 0;
    } else if (((Double) i[1]).doubleValue() <= 127.0) {
    p = WekaClassifier.N44d1f7f71(i);
    } else if (((Double) i[1]).doubleValue() > 127.0) {
    p = WekaClassifier.N4d7308bf9(i);
    } 
    return p;
  }
  static double N44d1f7f71(Object []i) {
    double p = Double.NaN;
    if (i[5] == null) {
      p = 0;
    } else if (((Double) i[5]).doubleValue() <= 26.4) {
      p = 0;
    } else if (((Double) i[5]).doubleValue() > 26.4) {
    p = WekaClassifier.N347cebb12(i);
    } 
    return p;
  }
  static double N347cebb12(Object []i) {
    double p = Double.NaN;
    if (i[7] == null) {
      p = 0;
    } else if (((Double) i[7]).doubleValue() <= 28.0) {
      p = 0;
    } else if (((Double) i[7]).doubleValue() > 28.0) {
    p = WekaClassifier.N5c0cd7f13(i);
    } 
    return p;
  }
  static double N5c0cd7f13(Object []i) {
    double p = Double.NaN;
    if (i[1] == null) {
      p = 0;
    } else if (((Double) i[1]).doubleValue() <= 99.0) {
      p = 0;
    } else if (((Double) i[1]).doubleValue() > 99.0) {
    p = WekaClassifier.Ndeabaa94(i);
    } 
    return p;
  }
  static double Ndeabaa94(Object []i) {
    double p = Double.NaN;
    if (i[6] == null) {
      p = 0;
    } else if (((Double) i[6]).doubleValue() <= 0.56) {
      p = 0;
    } else if (((Double) i[6]).doubleValue() > 0.56) {
    p = WekaClassifier.N464f8aac5(i);
    } 
    return p;
  }
  static double N464f8aac5(Object []i) {
    double p = Double.NaN;
    if (i[0] == null) {
      p = 1;
    } else if (((Double) i[0]).doubleValue() <= 6.0) {
    p = WekaClassifier.N153dc0b76(i);
    } else if (((Double) i[0]).doubleValue() > 6.0) {
      p = 1;
    } 
    return p;
  }
  static double N153dc0b76(Object []i) {
    double p = Double.NaN;
    if (i[7] == null) {
      p = 1;
    } else if (((Double) i[7]).doubleValue() <= 30.0) {
      p = 1;
    } else if (((Double) i[7]).doubleValue() > 30.0) {
    p = WekaClassifier.N2fb42ebe7(i);
    } 
    return p;
  }
  static double N2fb42ebe7(Object []i) {
    double p = Double.NaN;
    if (i[7] == null) {
      p = 0;
    } else if (((Double) i[7]).doubleValue() <= 34.0) {
      p = 0;
    } else if (((Double) i[7]).doubleValue() > 34.0) {
    p = WekaClassifier.N7753e6138(i);
    } 
    return p;
  }
  static double N7753e6138(Object []i) {
    double p = Double.NaN;
    if (i[5] == null) {
      p = 1;
    } else if (((Double) i[5]).doubleValue() <= 33.1) {
      p = 1;
    } else if (((Double) i[5]).doubleValue() > 33.1) {
      p = 0;
    } 
    return p;
  }
  static double N4d7308bf9(Object []i) {
    double p = Double.NaN;
    if (i[5] == null) {
      p = 0;
    } else if (((Double) i[5]).doubleValue() <= 29.9) {
    p = WekaClassifier.N36b051de10(i);
    } else if (((Double) i[5]).doubleValue() > 29.9) {
    p = WekaClassifier.N175db3116(i);
    } 
    return p;
  }
  static double N36b051de10(Object []i) {
    double p = Double.NaN;
    if (i[1] == null) {
      p = 0;
    } else if (((Double) i[1]).doubleValue() <= 145.0) {
      p = 0;
    } else if (((Double) i[1]).doubleValue() > 145.0) {
    p = WekaClassifier.N38ff486811(i);
    } 
    return p;
  }
  static double N38ff486811(Object []i) {
    double p = Double.NaN;
    if (i[7] == null) {
      p = 0;
    } else if (((Double) i[7]).doubleValue() <= 25.0) {
      p = 0;
    } else if (((Double) i[7]).doubleValue() > 25.0) {
    p = WekaClassifier.N50f4421a12(i);
    } 
    return p;
  }
  static double N50f4421a12(Object []i) {
    double p = Double.NaN;
    if (i[7] == null) {
      p = 1;
    } else if (((Double) i[7]).doubleValue() <= 61.0) {
    p = WekaClassifier.N5979e4b13(i);
    } else if (((Double) i[7]).doubleValue() > 61.0) {
      p = 0;
    } 
    return p;
  }
  static double N5979e4b13(Object []i) {
    double p = Double.NaN;
    if (i[5] == null) {
      p = 1;
    } else if (((Double) i[5]).doubleValue() <= 27.1) {
      p = 1;
    } else if (((Double) i[5]).doubleValue() > 27.1) {
    p = WekaClassifier.N311d118614(i);
    } 
    return p;
  }
  static double N311d118614(Object []i) {
    double p = Double.NaN;
    if (i[2] == null) {
      p = 1;
    } else if (((Double) i[2]).doubleValue() <= 82.0) {
    p = WekaClassifier.N73e3a3c515(i);
    } else if (((Double) i[2]).doubleValue() > 82.0) {
      p = 0;
    } 
    return p;
  }
  static double N73e3a3c515(Object []i) {
    double p = Double.NaN;
    if (i[6] == null) {
      p = 1;
    } else if (((Double) i[6]).doubleValue() <= 0.396) {
      p = 1;
    } else if (((Double) i[6]).doubleValue() > 0.396) {
      p = 0;
    } 
    return p;
  }
  static double N175db3116(Object []i) {
    double p = Double.NaN;
    if (i[1] == null) {
      p = 1;
    } else if (((Double) i[1]).doubleValue() <= 157.0) {
    p = WekaClassifier.N3829789217(i);
    } else if (((Double) i[1]).doubleValue() > 157.0) {
      p = 1;
    } 
    return p;
  }
  static double N3829789217(Object []i) {
    double p = Double.NaN;
    if (i[2] == null) {
      p = 1;
    } else if (((Double) i[2]).doubleValue() <= 61.0) {
      p = 1;
    } else if (((Double) i[2]).doubleValue() > 61.0) {
    p = WekaClassifier.N6161cf3018(i);
    } 
    return p;
  }
  static double N6161cf3018(Object []i) {
    double p = Double.NaN;
    if (i[7] == null) {
      p = 0;
    } else if (((Double) i[7]).doubleValue() <= 30.0) {
      p = 0;
    } else if (((Double) i[7]).doubleValue() > 30.0) {
      p = 1;
    } 
    return p;
  }
}
