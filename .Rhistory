# b)
formula <- "CLASS ~ ."
model <- ml_random_forest(df.train.undersampled, formula = formula)
predictions <- mdle.predict(model, df.test)
mdle.printConfusionMatrix(predictions, "Random Forest Model")
cat("\n\n")
df.neg.train <- df.train %>% filter(CLASS == 0)
df.pos.train <- df.train %>% filter(CLASS == 1)
# Determine the fractions of each class to use in sample
frac.neg <- sdf_nrow(df.neg.train) / sdf_nrow(df.train)
frac.pos <- sdf_nrow(df.pos.train) / sdf_nrow(df.train)
# Undersample
df.neg.train.undersampled <- sdf_sample(df.neg.train,
fraction = frac.pos, replacement = F)
df.pos.train.undersampled <- sdf_sample(df.pos.train,
fraction = frac.neg, replacement = F)
# Combine
df.train.undersampled <- sdf_bind_rows(df.pos.train.undersampled,
df.neg.train.undersampled)
# Count instances
n_pos <- sdf_nrow(df.pos.train.undersampled)
n_neg <- sdf_nrow(df.neg.train.undersampled)
cat("Number of instances in positive class after undersampling:", n_pos, "\n")
cat("Number of instances in negative class after undersampling:", n_neg, "\n")
df.neg.train <- df.train %>% filter(CLASS == 0)
df.pos.train <- df.train %>% filter(CLASS == 1)
# Determine the fractions of each class to use in sample
frac.neg <- sdf_nrow(df.neg.train) / sdf_nrow(df.train)
frac.pos <- sdf_nrow(df.pos.train) / sdf_nrow(df.train)
# Undersample
df.neg.train.undersampled <- sdf_sample(df.neg.train,
fraction = frac.pos, replacement = F)
df.pos.train.undersampled <- sdf_sample(df.pos.train,
fraction = frac.neg, replacement = F)
# Combine
df.train.undersampled <- sdf_bind_rows(df.pos.train.undersampled,
df.neg.train.undersampled)
# Count instances
n_pos <- sdf_nrow(df.pos.train.undersampled)
n_neg <- sdf_nrow(df.neg.train.undersampled)
cat("Number of instances in positive class after undersampling:", n_pos, "\n")
cat("Number of instances in negative class after undersampling:", n_neg, "\n")
# c)
# Determine the fractions of each class to use in sample
os_factor <- sdf_nrow(df.neg.train) / sdf_nrow(df.pos.train)
# Oversample
df.pos.train.oversampled <- sdf_sample(df.pos.train, fraction = os_factor, replacement = T)
# Combine oversampled positive and negative classes
df.train.oversampled <- sdf_bind_rows(df.pos.train.oversampled, df.neg.train)
# Count instances after oversampling
n_pos_oversampled <- sdf_nrow(df.pos.train.oversampled)
n_neg_oversampled <- sdf_nrow(df.neg.train.oversampled)
cat("Number of instances in positive class after oversampling:", n_pos_oversampled, "\n")
cat("Number of instances in negative class after oversampling:", n_neg_oversampled, "\n")
# Determine the fractions of each class to use in sample
frac.pos <- sdf_nrow(df.neg.train) / sdf_nrow(df.pos.train)
# Oversample
df.pos.train.oversampled <- sdf_sample(df.pos.train, fraction = frac.pos, replacement = T)
# Combine oversampled positive and negative classes
df.train.oversampled <- sdf_bind_rows(df.pos.train.oversampled, df.neg.train)
# Count instances after oversampling
n_pos <- sdf_nrow(df.pos.train.oversampled)
n_neg <- sdf_nrow(df.neg.train)
cat("Number of instances in positive class after oversampling:", n_pos, "\n")
cat("Number of instances in negative class after oversampling:", n_neg, "\n")
# d)
formula <- "CLASS ~ ."
model <- ml_random_forest(df.train.oversampled, formula = formula)
predictions <- mdle.predict(model, df.test)
mdle.printConfusionMatrix(predictions, "Random Forest Model")
cat("\n\n")
# a)
df.neg.train <- df.train %>% filter(CLASS == 0)
df.pos.train <- df.train %>% filter(CLASS == 1)
# Determine the fractions of each class to use in sample
frac.neg <- sdf_nrow(df.neg.train) / sdf_nrow(df.train)
# frac.pos <- sdf_nrow(df.pos.train) / sdf_nrow(df.train)
# Undersample
df.neg.train.undersampled <- sdf_sample(df.neg.train, fraction = frac.pos, replacement = F)
# a)
df.neg.train <- df.train %>% filter(CLASS == 0)
df.pos.train <- df.train %>% filter(CLASS == 1)
# Determine the fractions of each class to use in sample
# frac.neg <- sdf_nrow(df.neg.train) / sdf_nrow(df.train)
frac.pos <- sdf_nrow(df.pos.train) / sdf_nrow(df.train)
# Undersample
df.neg.train.undersampled <- sdf_sample(df.neg.train, fraction = frac.pos, replacement = F)
# df.pos.train.undersampled <- sdf_sample(df.pos.train, fraction = frac.neg, replacement = F)
# Combine
df.train.undersampled <- sdf_bind_rows(df.pos.train, df.neg.train.undersampled)
# Count instances
n_pos <- sdf_nrow(df.pos.train)
n_neg <- sdf_nrow(df.neg.train.undersampled)
cat("Number of instances in positive class after undersampling:", n_pos, "\n")
cat("Number of instances in negative class after undersampling:", n_neg, "\n")
# b)
formula <- "CLASS ~ ."
model <- ml_random_forest(df.train.undersampled, formula = formula)
predictions <- mdle.predict(model, df.test)
mdle.printConfusionMatrix(predictions, "Random Forest Model")
cat("\n\n")
################# Preparation ################
library(dplyr) #data manipulation
library(sparklyr) #spark
library(smotefamily) #For SMOTE sampling
library(data.table) #To be used when possible, as a more performant data.frame
if (!exists("printConfusionMatrix", mode = "function"))
source("Lab3/helperfunctions.R")
################# Spark setup ################
spark_disconnect_all() #just preventive code
sc <- spark_connect('local', version = '3.3.2', hadoop_version = '3', config = list())
basepath <- "C:/Users/pedro/OneDrive/Documents/ISEL/Mestrado/Semestre 2/MDLE/Repo/Projeto/Fase1/Influenza-Outbreak-Dataset"
tr.data <- c("train_data_25.csv", "train_data_30.csv") #The data to use
labels <- c("train_labels_25.csv", "train_labels_30.csv") #the lables for the data
fun1 <- function(i) { #read CSV data
print(paste(basepath, "train", i, sep = "/"))
read.csv(paste(basepath, "train", i, sep = "/"), header = FALSE, stringsAsFactors = FALSE)
}
fun2 <- function(i) { #read and transpose CSV data
read.csv(paste(basepath, "train", i, sep = "/"), header = FALSE, stringsAsFactors = FALSE) %>%
t %>%
as.data.table
}
df <- do.call(rbind, lapply(tr.data, fun1)) #bind csv together
df.l <- do.call(rbind, lapply(labels, fun2)) #bind class together
names(df.l) <- c("CLASS") #rename dependent variable
df.local <- cbind(df.l, df) #bind them together
df <- copy_to(sc, df.local)
View(df)
View(df.l)
View(df.local)
num_rows <- sparklyr::sdf_nrow(df)
num_cols <- sparklyr::sdf_ncol(df)
print(num_rows)
print(num_cols)
expected_rows <- 2190
expected_cols <- 546
# Use stopifnot() function to check if the number of rows and columns matches the expected values
print("Check number of rows")
stopifnot(num_rows == expected_rows)
print("Check number of columns")
stopifnot(num_cols == expected_cols)
idx <- c(1, 2, 5, 6, 9, 10, 11, 14, 16, 17, 19, 21, 24, 25, 26, 31, 32, 33, 34, 35, 41, 44, 49, 50, 54)
#a)
df.sel <- df %>% select(idx)
df.sel <- df %>% select(all_off(idx))
df.sel <- df %>% select(idx)
View(df.sel)
View(head(df.sel))
View(head(df.sel))
set.seed(123)
#Define the train and test sizes
weights <- c(training = 2/3, test = 1/3)
split_dff <- sdf_random_split(df, weights = weights)
df.train <- split_dff$training
df.test <- split_dff$test
print(table(df.train$CLASS))
print(table(df.test$CLASS))
df.train_r <- collect(df.train)
df.test_r <- collect(df.test)
# Apply table() function on R data frames
df.train$CLASS <- as.factor(df.train_r$CLASS)
df.test$CLASS <- as.factor(df.test_r$CLASS)
train_table <- table(df.train_r$CLASS)
test_table <- table(df.test_r$CLASS)
cat("Training dataset counts:\n")
print(train_table)
cat("\nTest dataset counts:\n")
print(test_table)
cat("Training dataset counts using spark:\n")
print(df_train_counts <- df.train %>%
group_by(CLASS) %>%
count() %>%
collect())
cat("\nTest dataset counts using spark:\n")
print(df_test_counts <- df.test %>%
group_by(CLASS) %>%
count() %>%
collect())
formula <- "CLASS ~ ."
model <- ml_random_forest(df.train, formula = formula)
predictions <- mdle.predict(model, df.test)
mdle.printConfusionMatrix(predictions, "Random Forest Model")
cat("\n\n")
#Using imbalanced correcting sampling techniques
# a)
df.neg.train <- df.train %>% filter(CLASS == 0)
df.pos.train <- df.train %>% filter(CLASS == 1)
# Determine the fractions of each class to use in sample
frac.pos <- sdf_nrow(df.pos.train) / sdf_nrow(df.train)
# Undersample
df.neg.train.undersampled <- sdf_sample(df.neg.train, fraction = frac.pos, replacement = F)
# Combine
df.train.undersampled <- sdf_bind_rows(df.pos.train, df.neg.train.undersampled)
# Count instances
n_pos <- sdf_nrow(df.pos.train)
n_neg <- sdf_nrow(df.neg.train.undersampled)
cat("Number of instances in positive class after undersampling:", n_pos, "\n")
cat("Number of instances in negative class after undersampling:", n_neg, "\n")
# b)
formula <- "CLASS ~ ."
model <- ml_random_forest(df.train.undersampled, formula = formula)
predictions <- mdle.predict(model, df.test)
mdle.printConfusionMatrix(predictions, "Random Forest Model")
cat("\n\n")
# Determine the fractions of each class to use in sample
frac.pos <- sdf_nrow(df.neg.train) / sdf_nrow(df.pos.train)
# Oversample
df.pos.train.oversampled <- sdf_sample(df.pos.train, fraction = frac.pos, replacement = T)
# Combine oversampled positive and negative classes
df.train.oversampled <- sdf_bind_rows(df.pos.train.oversampled, df.neg.train)
# Count instances after oversampling
n_pos <- sdf_nrow(df.pos.train.oversampled)
n_neg <- sdf_nrow(df.neg.train)
cat("Number of instances in positive class after oversampling:", n_pos, "\n")
cat("Number of instances in negative class after oversampling:", n_neg, "\n")
# d)
formula <- "CLASS ~ ."
model <- ml_random_forest(df.train.oversampled, formula = formula)
predictions <- mdle.predict(model, df.test)
mdle.printConfusionMatrix(predictions, "Random Forest Model")
df.neg.train.smote <- BLSMOTE(df.neg.train[, -1], df.neg.train[, 1], K = 5, C = 6, method = "both")
View(df.neg.train)
df.neg.train.dataframe <- as.data.fram(df.neg.train)
df.neg.train.dataframe <- as.data.frame(df.neg.train)
df.neg.train.smote <- BLSMOTE(df.neg.train.dataframe[, -1], df.neg.train.dataframe[, 1], K = 5, C = 6, method = "both")
df.neg.train.dataframe <- as.data.frame(df.neg.train)
df.neg.train.smote <- BLSMOTE(df.neg.train.dataframe[, -1], df.neg.train.dataframe[, 1], K = 5, C = 6, method = "type1")
View(df.neg.train.dataframe[, -1])
df.neg.train.dataframe <- as.data.frame(df.neg.train)
df.neg.train.smote <- BLSMOTE(df.neg.train.dataframe[, -1], df.neg.train.dataframe[, 1], K = 5, C = 6, method = "type1")
View(def.neg.train)
View(df.neg.train)
View(as.data.frame(df.neg.train))
View(as.data.frame(df.neg.train))
df.neg.train.dataframe <- as.data.frame(df.neg.train)
View(df.neg.train.dataframe)
View(as.data.frame(df.neg.train))
View(df.neg.train.dataframe[,-1])
View(df.neg.train.dataframe[,1])
print(df.neg.train.dataframe[,1])
max.print(df.neg.train.dataframe[,1])
max.print(df.neg.train.dataframe[,1])
View(as.data.frame(df.neg.train))
max.print(df.neg.train.dataframe[,1])
View(df.neg.train.dataframe[,1])
View(df.neg.train.dataframe[,1])df.neg.train.dataframe <- as.data.frame(df
df.neg.train.dataframe <- as.data.frame(df.neg.train)
df.neg.train.dataframe[, 1]
View(df.neg.train.dataframe[, 1])
df.neg.train.dataframe <- as.data.frame(df.neg.train)
View(df.neg.train.dataframe)
View(df.neg.train.dataframe[, -1])
View(df.neg.train.dataframe[, 1])
dim(df.neg.train.dataframe[, 1])
str(df.neg.train.dataframe[, 1])
dim(df.neg.train.dataframe[, -1])
df.neg.train.smote <- BLSMOTE(df.neg.train.dataframe[, -1], df.neg.train.dataframe[, 1], K = 1, C = 6, method = "type1")
View(df.neg.train.dataframe[, -1])
View(df.neg.train.dataframe[, 1])
unique(df.neg.train.dataframe[, 1])
df.train.dataframe <- as.data.frame(df.train)
df.train.smote <- BLSMOTE(df.train.dataframe[, -1], df.train.dataframe[, 1], K = 5, C = 6, method = "type1")
View(df.train.dataframe)
unique(df.train.dataframe[, 1])
unique(df.train.dataframe)
df.train.dataframe <- as.data.frame(df.train)
# B-SMOTE
df.train.smote <- BLSMOTE(df.train.dataframe[, -1], df.train.dataframe[, 1], K = 7, C = 6, method = "type1")
View(df.train.smote)
View(df.train.oversampled)
df.train.dataframe <- as.data.frame(df.train)
# B-SMOTE
balanced.data <- BLSMOTE(df.train.dataframe[, -1], df.train.dataframe[, 1], K = 7, C = 6, method = "type1")
balanced.labels <- rep(c(0, 1), each = nrow(balanced.data)/2)
bsmote.dataset <- data.frame(balanced.data, balanced.labels)
df.train.dataframe <- as.data.frame(df.train)
# B-SMOTE
balanced.data <- BLSMOTE(df.train.dataframe[, -1], df.train.dataframe[, 1], K = 7, C = 6, method = "type1")
# balanced.labels <- rep(c(0, 1), each = nrow(balanced.data)/2)
#
# bsmote.dataset <- data.frame(balanced.data, balanced.labels)
View(bsmote.data)
df.train.dataframe <- as.data.frame(df.train)
# B-SMOTE
balanced.data <- BLSMOTE(df.train.dataframe[, -1], df.train.dataframe[, 1], K = 7, C = 6, method = "type1")
# balanced.labels <- rep(c(0, 1), each = nrow(balanced.data)/2)
#
# bsmote.dataset <- data.frame(balanced.data, balanced.labels)
View(balanced.data)
View(balanced.data$data)
View(balanced.data$syn_data)
# e)
df.train.dataframe <- as.data.frame(df.train)
# B-SMOTE
df.train.blsmote <- BLSMOTE(df.train.dataframe[, -1], df.train.dataframe[, 1], K = 7, C = 6, method = "type1")
# f)
formula <- "CLASS ~ ."
model <- ml_random_forest(df.train.blsmote, formula = formula)
df.train.dataframe <- as.data.frame(df.train)
# B-SMOTE
df.train.blsmote <- BLSMOTE(df.train.dataframe[, -1], df.train.dataframe[, 1], K = 7, C = 6, method = "type1")
df.train.blsmote <- as.DataFrame(sc, df.train.blsmote)
View(df.train)
View(df.train)$CLASS
View(df.train)$V1
View(df.train$CLASS)
View(df.train$V1)
df.train.labels <- df.train %>% select(CLASS)
df.train.data <- df.train %>% select(-CLASS)
# B-SMOTE
df.train.blsmote <- BLSMOTE(df.train.data, df.train.labels, K = 7, C = 6, method = "type1")
View(df.train.labels)
df.train.labels <- df.train %>% select("CLASS")
df.train.data <- df.train %>% select(-"CLASS")
View(df.train.labels)
df.train.labels <- df.train %>% select(CLASS)
View(df.train.labels)
# e)
df.train.labels <- df.train %>% filter(CLASS)
df.train.data <- df.train %>% filter(-CLASS)
# B-SMOTE
df.train.blsmote <- BLSMOTE(df.train.data, df.train.labels, K = 7, C = 6, method = "type1")
# e)
df.train.labels <- df.train %>% select(1)
df.train.data <- df.train %>% select(-1)
# B-SMOTE
df.train.blsmote <- BLSMOTE(df.train.data, df.train.labels, K = 7, C = 6, method = "type1")
View(df.train)
View(collect(df.train))
df.train.labels <- collect(df.train) %>% select(1)
# e)
df.train.labels <- collect(df.train) %>% select(1)
df.train.data <- collect(df.train) %>% select(-1)
# B-SMOTE
df.train.blsmote <- BLSMOTE(df.train.data, df.train.labels, K = 7, C = 6, method = "type1")
df.train.blsmote <- as.DataFrame(sc, df.train.blsmote)
# e)
df.train.labels <- collect(df.train) %>% select(1)
df.train.data <- collect(df.train) %>% select(-1)
# B-SMOTE
df.train.blsmote <- BLSMOTE(df.train.data, df.train.labels, K = 7, C = 6, method = "type1")
# f)
formula <- "CLASS ~ ."
model <- ml_random_forest(df.train.blsmote, formula = formula)
df.train.labels <- df.train %>% select("CLASS")
library(dplyr) #data manipulation
library(sparklyr) #spark
library(smotefamily) #For SMOTE sampling
library(data.table) #To be used when possible, as a more performant data.frame
if (!exists("printConfusionMatrix", mode = "function"))
source("Lab3/helperfunctions.R")
################# Spark setup ################
spark_disconnect_all() #just preventive code
sc <- spark_connect('local', version = '3.3.2', hadoop_version = '3', config = list())
################# Load data ################
basepath <- "C:/Users/pedro/OneDrive/Documents/ISEL/Mestrado/Semestre 2/MDLE/Repo/Projeto/Fase1/Influenza-Outbreak-Dataset"
tr.data <- c("train_data_25.csv", "train_data_30.csv") #The data to use
labels <- c("train_labels_25.csv", "train_labels_30.csv") #the labels for the data
fun1 <- function(i) { #read CSV data
print(paste(basepath, "train", i, sep = "/"))
read.csv(paste(basepath, "train", i, sep = "/"), header = FALSE, stringsAsFactors = FALSE)
}
fun2 <- function(i) { #read and transpose CSV data
read.csv(paste(basepath, "train", i, sep = "/"), header = FALSE, stringsAsFactors = FALSE) %>%
t %>%
as.data.table
}
df <- do.call(rbind, lapply(tr.data, fun1)) #bind csv together
df.l <- do.call(rbind, lapply(labels, fun2)) #bind class together
names(df.l) <- c("CLASS") #rename dependent variable
df.local <- cbind(df.l, df) #bind them together
df <- copy_to(sc, df.local)
set.seed(123)
#Define the train and test sizes
weights <- c(training = 2/3, test = 1/3)
split_dff <- sdf_random_split(df, weights = weights)
df.train <- split_dff$training
df.test <- split_dff$test
formula <- "CLASS ~ ."
df.train.labels <- df.train %>% select("CLASS")
View(df.train.labels)
dim(df.train.labels)
# B-SMOTE
df.train.blsmote <- BLSMOTE(df.train, df.train$CLASS, K = 7, C = 6, method = "type1")
# B-SMOTE
df.train.blsmote <- BLSMOTE(df.train[,-1], df.train$CLASS, K = 7, C = 6, method = "type1")
View(df.train$CLASS)
dim(df.train$CLASS)
dim(df.train)
View(df.train)
df.train.labels <- collect(df.train %>% select("CLASS"))
df.train.data <- collect(df.train %>% select(-CLASS))
# B-SMOTE
df.train.blsmote <- BLSMOTE(df.train.data, df.train.labels, K = 7, C = 6, method = "type1")
# f)
model <- ml_random_forest(df.train.blsmote, formula = formula)
df.train.labels <- collect(df.train %>% select(CLASS))
df.train.data <- collect(df.train %>% select(-CLASS))
# B-SMOTE
df.train.blsmote <- BLSMOTE(df.train.data, df.train.labels, K = 7, C = 6, method = "type1")
# f)
model <- ml_random_forest(df.train.blsmote, formula = formula)
View(df.train.labels)
dim(df.train.labels)
View(df.train)
# e)
df.train.labels <- copy_to(df.train %>% select(CLASS))
show(df.train)
df.train.spark <- copy_to(sc, df.train, "df.train")
# e)
df.train.spark <- copy_to(sc, df.train, "df.train.spark")
df.train.labels <- collect(df.train.spark %>% select(CLASS))
df.train.labels <- collect(df.train %>% select(CLASS))
df.train.data <- collect(df.train  %>% select(-CLASS))
# B-SMOTE
df.train.blsmote <- BLSMOTE(df.train.data, df.train.labels, K = 7, C = 6, method = "type1")
# f)
model <- ml_random_forest(df.train.blsmote, formula = formula)
View(df.train.blsmote)
df.train.labels <- collect(df.train %>% select(CLASS))
df.train.data <- collect(df.train  %>% select(-CLASS))
# B-SMOTE
df.train.blsmote <- BLSMOTE(df.train.data, df.train.labels, K = 7, C = 6, method = "type1")
# f)
model <- ml_random_forest(df.train.blsmote$syn_data, formula = formula)
?BLSMOTE
df.train.labels <- collect(df.train %>% select(CLASS))
df.train.data <- collect(df.train  %>% select(-CLASS))
# B-SMOTE
df.train.blsmote <- BLSMOTE(df.train.data, df.train.labels, K = 7, C = 6, method = "type1")
# f)
model <- ml_random_forest(df.train.blsmote$data, formula = formula)
df.train.labels <- collect(df.train %>% select(CLASS))
df.train.data <- collect(df.train  %>% select(-CLASS))
# B-SMOTE
df.train.blsmote <- BLSMOTE(df.train.data, df.train.labels, K = 7, C = 6, method = "type1")
# f)
spark.shit <- copy_to(sc, df.train.blsmote)
df.train.labels <- collect(df.train %>% select(CLASS))
df.train.data <- collect(df.train  %>% select(-CLASS))
# B-SMOTE
df.train.blsmote <- BLSMOTE(df.train.data, df.train.labels, K = 7, C = 6, method = "type1")
# f)
spark.shit <- copy_to(sc, df.train.blsmote$data)
model <- ml_random_forest(spark.shit, formula = formula)
View(df.train.blsmote$data)
df.train.data <- collect(df.train  %>% select(-CLASS))
# B-SMOTE
df.train.blsmote <- BLSMOTE(df.train.data, df.train.labels, K = 7, C = 6, method = "type1")
# f)
spark.shit <- copy_to(sc, df.train.blsmote$data)
model <- ml_random_forest(spark.shit, formula = "class ~ .")
predictions <- mdle.predict(model, df.test)
mdle.printConfusionMatrix(predictions, "Random Forest Model")
df.train.labels <- collect(df.train %>% select(CLASS))
df.train.data <- collect(df.train  %>% select(-CLASS))
# B-SMOTE
df.train.blsmote <- BLSMOTE(df.train.data, df.train.labels, K = 7, C = 6, method = "type1")
# f)
df.train.blsmote.spark <- copy_to(sc, df.train.blsmote$data)
model <- ml_random_forest(df.train.blsmote.spark, formula = "class ~ .")
predictions <- mdle.predict(model, df.test)
mdle.printConfusionMatrix(predictions, "Random Forest Model")
df.train.labels <- collect(df.train %>% select(CLASS))
df.train.data <- collect(df.train  %>% select(-CLASS))
# B-SMOTE
df.train.blsmote <- BLSMOTE(df.train.data, df.train.labels, K = 7, C = 6, method = "type1")
# f)
df.train.blsmote.spark <- copy_to(sc, df.train.blsmote$data)
model <- ml_random_forest(df.train.blsmote.spark, formula = "class ~ .", seed = 123)
predictions <- mdle.predict(model, df.test)
mdle.printConfusionMatrix(predictions, "Random Forest Model")
df.train.labels <- collect(df.train %>% select(CLASS))
df.train.data <- collect(df.train  %>% select(-CLASS))
# B-SMOTE
df.train.blsmote <- BLSMOTE(df.train.data, df.train.labels, K = 7, C = 6, method = "type1")
# f)
df.train.blsmote.spark <- copy_to(sc, df.train.blsmote$data)
model <- ml_random_forest(df.train.blsmote.spark, formula = "class ~ .", seed = 123)
predictions <- mdle.predict(model, df.test)
mdle.printConfusionMatrix(predictions, "Random Forest Model")
df.train.labels <- collect(df.train %>% select(CLASS))
df.train.data <- collect(df.train  %>% select(-CLASS))
# B-SMOTE
df.train.blsmote <- BLSMOTE(df.train.data, df.train.labels, K = 7, C = 5, method = "type1")
# f)
df.train.blsmote.spark <- copy_to(sc, df.train.blsmote$data)
model <- ml_random_forest(df.train.blsmote.spark, formula = "class ~ .")
predictions <- mdle.predict(model, df.test)
mdle.printConfusionMatrix(predictions, "Random Forest Model")
df.train.labels <- collect(df.train %>% select(CLASS))
df.train.data <- collect(df.train  %>% select(-CLASS))
# B-SMOTE
df.train.blsmote <- BLSMOTE(df.train.data, df.train.labels, K = 10, C = 5, method = "type1")
# f)
df.train.blsmote.spark <- copy_to(sc, df.train.blsmote$data)
model <- ml_random_forest(df.train.blsmote.spark, formula = "class ~ .")
predictions <- mdle.predict(model, df.test)
mdle.printConfusionMatrix(predictions, "Random Forest Model")
# B-SMOTE
df.train.blsmote <- BLSMOTE(df.train.data, df.train.labels, K = 7, C = 5, method = "type2")
# f)
df.train.blsmote.spark <- copy_to(sc, df.train.blsmote$data)
model <- ml_random_forest(df.train.blsmote.spark, formula = "class ~ .")
df.train.labels <- collect(df.train %>% select(CLASS))
df.train.data <- collect(df.train  %>% select(-CLASS))
# B-SMOTE
df.train.blsmote <- BLSMOTE(df.train.data, df.train.labels, K = 7, C = 5, method = "type2")
# f)
df.train.blsmote.spark <- copy_to(sc, df.train.blsmote$data)
model <- ml_random_forest(df.train.blsmote.spark, formula = "class ~ .")
